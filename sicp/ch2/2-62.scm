(define (adjoin-set x set)
    (cond ((null? set) (list x)) 
          ((= x (car set)) set)
          ((< x (car set)) (cons x set))
          (else (cons (car set) (adjoin-set x (cdr set))))))

(define (union-set set1 set2)
  (cond ((null? set1) set2) 
        ((null? set2) set1)
        ((= (car set1) (car set2)) 
         (adjoin-set (car set1) 
                     (union-set (cdr set1) (cdr set2))))
        ((< (car set1) (car set2)) 
         (adjoin-set (car set1)
                     (union-set (cdr set1) set2)))
        (else 
          (adjoin-set (car set2)
                      (union-set set1 (cdr set2))))))
